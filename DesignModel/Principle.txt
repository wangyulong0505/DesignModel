1、	单一职责原则：就一个类而言，应该仅有一个引起他变化的原因。
	如果一个类承担的职责过多，就等于把这些职责耦合在一起，一个职责的变化可能会削弱或者抑制这个类完成其他职责的能力。这种耦合会导致脆弱的设计，当变化发生时，设计会遭受到意想不到的破坏。

2、	开放封闭原则：软件实体（类，模块，函数等）应该可以扩展，但是不可以修改。
	软件实体对于扩展是开放的，对于修改是封闭的。

3、	依赖倒转原则：抽象不应该依赖细节，细节应该依赖于抽象（针对接口编程，不要针对实现编程）
	A.高层模块不应该依赖底层模块，两者都应该依赖抽象
	B.抽象不应该依赖细节，细节应该依赖抽象

4、	里氏替换原则：子类型必须能够替换掉他们的父类型

5、 最少知识原则（迪米特法则）：如果两个类不必彼此直接通信，那么这两个类就不应当发生直接的相互作用。如果其中一个类需要调用另一个类的一个方法，可以通过第三者转发这个调用。

6、合成/聚合复用原则：尽量使用合成/集合，尽量不要使用类继承